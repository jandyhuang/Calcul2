type token =
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | POWER
  | INTDIVIDE
  | MOD
  | ASSIGN
  | DERIV
  | INTEG
  | SQRT
  | SIN
  | COS
  | TAN
  | ASIN
  | ACOS
  | ATAN
  | LOG
  | LN
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | NOT
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LVEC
  | RVEC
  | SEMI
  | OUTPUT
  | COMMA
  | IF
  | ELSE
  | FOR
  | WHILE
  | TO
  | DOWNTO
  | RETURN
  | LITERAL of (int)
  | REAL of (float)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 
open Printf
open Ast 
# 58 "parser.ml"
let yytransl_const = [|
  257 (* PLUS *);
  258 (* MINUS *);
  259 (* TIMES *);
  260 (* DIVIDE *);
  261 (* POWER *);
  262 (* INTDIVIDE *);
  263 (* MOD *);
  264 (* ASSIGN *);
  265 (* DERIV *);
  266 (* INTEG *);
  267 (* SQRT *);
  268 (* SIN *);
  269 (* COS *);
  270 (* TAN *);
  271 (* ASIN *);
  272 (* ACOS *);
  273 (* ATAN *);
  274 (* LOG *);
  275 (* LN *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* AND *);
  283 (* OR *);
  284 (* NOT *);
  285 (* LPAREN *);
  286 (* RPAREN *);
  287 (* LBRACE *);
  288 (* RBRACE *);
  289 (* LVEC *);
  290 (* RVEC *);
  291 (* SEMI *);
  292 (* OUTPUT *);
  293 (* COMMA *);
  294 (* IF *);
  295 (* ELSE *);
  296 (* FOR *);
  297 (* WHILE *);
  298 (* TO *);
  299 (* DOWNTO *);
  300 (* RETURN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  301 (* LITERAL *);
  302 (* REAL *);
  303 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\003\000\003\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\005\000\005\000\
\006\000\006\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\001\000\001\000\001\000\009\000\009\000\010\000\010\000\
\012\000\012\000\011\000\011\000\008\000\013\000\014\000\014\000\
\000\000"

let yylen = "\002\000\
\000\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\001\000\001\000\001\000\003\000\004\000\003\000\000\000\001\000\
\000\000\002\000\002\000\003\000\003\000\005\000\007\000\009\000\
\005\000\000\000\002\000\002\000\008\000\006\000\000\000\001\000\
\001\000\003\000\000\000\002\000\004\000\003\000\000\000\003\000\
\002\000"

let yydefred = "\000\000\
\050\000\000\000\000\000\000\000\051\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\034\000\000\000\000\000\057\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\000\000\000\000\038\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\058\000\037\000\000\000\000\000\000\000\
\004\000\000\000\000\000\060\000\041\000\053\000\000\000\000\000\
\000\000\000\000\000\000\042\000\000\000\000\000\000\000\000\000\
\000\000\043\000\045\000\000\000\000\000\000\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\
\047\000\000\000\000\000\048\000"

let yydgoto = "\002\000\
\003\000\062\000\063\000\099\000\110\000\091\000\100\000\005\000\
\006\000\025\000\088\000\026\000\000\000\000\000"

let yysindex = "\255\255\
\000\000\000\000\222\254\006\255\000\000\000\000\209\255\238\254\
\209\255\209\255\209\255\209\255\209\255\209\255\209\255\209\255\
\209\255\209\255\209\255\000\000\000\000\018\255\217\002\000\000\
\000\255\251\254\048\255\048\255\048\255\048\255\048\255\048\255\
\048\255\048\255\048\255\132\003\042\003\209\255\209\255\209\255\
\209\255\209\255\209\255\209\255\209\255\209\255\209\255\209\255\
\209\255\209\255\209\255\209\255\209\255\209\255\209\255\209\255\
\000\000\250\254\248\254\000\000\132\003\011\255\000\000\192\255\
\001\255\001\255\048\255\048\255\132\003\048\255\132\003\048\255\
\048\255\159\003\159\003\242\255\242\255\242\255\242\255\132\003\
\132\003\209\255\000\000\000\000\000\000\209\255\132\003\009\255\
\000\000\054\255\005\255\000\000\000\000\000\000\031\255\044\255\
\047\255\209\255\244\002\000\000\052\255\209\255\209\255\209\255\
\015\003\000\000\000\000\072\003\132\003\042\255\102\003\000\000\
\142\255\209\255\142\255\039\255\050\255\000\000\142\255\209\255\
\000\000\049\255\142\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\082\000\000\000\000\000\000\000\000\000\056\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\057\255\031\000\061\000\091\000\121\000\151\000\181\000\
\211\000\241\000\015\001\012\000\000\000\000\000\058\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\000\000\059\255\
\195\001\225\001\045\001\075\001\072\000\105\001\102\000\135\001\
\165\001\249\001\072\002\253\001\025\002\043\002\061\002\132\000\
\162\000\000\000\000\000\000\000\000\000\000\000\003\000\158\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\060\255\000\000\
\000\000\000\000\000\000\000\000\024\255\000\000\000\000\000\000\
\000\000\060\255\000\000\095\255\000\000\000\000\000\000\064\255\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\014\000\111\003\151\255\008\000\181\255\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 1210
let yytable = "\001\000\
\035\000\082\000\054\000\042\000\043\000\044\000\045\000\046\000\
\117\000\047\000\048\000\032\000\004\000\007\000\122\000\009\000\
\010\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\083\000\038\000\055\000\056\000\024\000\058\000\023\000\059\000\
\018\000\019\000\008\000\093\000\094\000\116\000\084\000\118\000\
\085\000\036\000\095\000\121\000\096\000\097\000\039\000\124\000\
\098\000\020\000\021\000\022\000\044\000\040\000\046\000\090\000\
\047\000\048\000\040\000\102\000\024\000\007\000\009\000\010\000\
\011\000\012\000\013\000\014\000\015\000\016\000\017\000\009\000\
\103\000\055\000\056\000\104\000\114\000\119\000\123\000\018\000\
\019\000\065\000\093\000\107\000\120\000\055\000\056\000\001\000\
\003\000\095\000\025\000\096\000\097\000\039\000\039\000\098\000\
\020\000\021\000\022\000\089\000\101\000\011\000\092\000\000\000\
\000\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\026\000\000\000\046\000\046\000\000\000\046\000\046\000\000\000\
\000\000\000\000\000\000\019\000\046\000\000\000\046\000\046\000\
\000\000\000\000\046\000\046\000\046\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\
\009\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000\019\000\000\000\093\000\000\000\000\000\000\000\
\000\000\000\000\000\000\095\000\028\000\096\000\097\000\000\000\
\000\000\098\000\020\000\021\000\022\000\000\000\000\000\000\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\000\000\
\047\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\009\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\086\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\019\000\000\000\000\000\
\030\000\000\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\000\000\047\000\048\000\000\000\020\000\021\000\022\000\
\000\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\000\000\035\000\035\000\055\000\056\000\000\000\031\000\000\000\
\000\000\000\000\000\000\000\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\000\000\000\000\035\000\023\000\
\023\000\023\000\023\000\035\000\023\000\035\000\000\000\000\000\
\000\000\032\000\000\000\000\000\007\000\000\000\032\000\035\000\
\032\000\054\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\000\000\032\000\000\000\023\000\024\000\024\000\024\000\
\024\000\023\000\024\000\023\000\000\000\000\000\000\000\036\000\
\000\000\000\000\008\000\000\000\036\000\023\000\036\000\000\000\
\024\000\024\000\024\000\024\000\024\000\024\000\000\000\000\000\
\036\000\000\000\024\000\025\000\025\000\025\000\025\000\024\000\
\025\000\024\000\000\000\000\000\000\000\009\000\000\000\000\000\
\010\000\000\000\009\000\024\000\009\000\000\000\025\000\025\000\
\025\000\025\000\025\000\025\000\000\000\000\000\009\000\000\000\
\025\000\026\000\026\000\026\000\026\000\025\000\026\000\025\000\
\000\000\000\000\000\000\011\000\000\000\000\000\021\000\000\000\
\011\000\025\000\011\000\000\000\026\000\026\000\026\000\026\000\
\026\000\026\000\000\000\000\000\011\000\000\000\026\000\027\000\
\027\000\027\000\027\000\026\000\027\000\026\000\000\000\000\000\
\000\000\019\000\000\000\000\000\022\000\000\000\019\000\026\000\
\019\000\000\000\027\000\027\000\027\000\027\000\027\000\027\000\
\000\000\000\000\019\000\000\000\027\000\028\000\028\000\028\000\
\028\000\027\000\028\000\027\000\000\000\000\000\000\000\020\000\
\000\000\000\000\005\000\000\000\020\000\027\000\020\000\000\000\
\028\000\028\000\028\000\028\000\028\000\028\000\000\000\000\000\
\020\000\000\000\028\000\029\000\029\000\029\000\029\000\028\000\
\029\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\028\000\000\000\000\000\029\000\029\000\
\029\000\029\000\029\000\029\000\000\000\000\000\000\000\000\000\
\029\000\030\000\030\000\030\000\030\000\029\000\030\000\029\000\
\013\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\029\000\000\000\000\000\030\000\030\000\030\000\030\000\
\030\000\030\000\000\000\000\000\000\000\000\000\030\000\031\000\
\031\000\031\000\031\000\030\000\031\000\030\000\000\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\000\000\000\000\031\000\031\000\031\000\031\000\031\000\031\000\
\000\000\000\000\017\000\000\000\031\000\007\000\007\000\007\000\
\007\000\031\000\007\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\031\000\000\000\000\000\
\007\000\007\000\007\000\007\000\007\000\007\000\000\000\014\000\
\000\000\000\000\007\000\008\000\008\000\008\000\008\000\007\000\
\008\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\008\000\008\000\
\008\000\008\000\008\000\008\000\000\000\000\000\000\000\000\000\
\008\000\010\000\010\000\010\000\010\000\008\000\010\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\010\000\010\000\010\000\010\000\
\010\000\010\000\000\000\000\000\000\000\000\000\010\000\021\000\
\021\000\021\000\021\000\010\000\021\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
\000\000\000\000\000\000\000\000\021\000\022\000\022\000\022\000\
\022\000\021\000\022\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\021\000\000\000\000\000\
\022\000\022\000\022\000\022\000\022\000\022\000\000\000\000\000\
\000\000\000\000\022\000\005\000\005\000\000\000\000\000\022\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\000\000\005\000\005\000\
\005\000\005\000\005\000\005\000\000\000\000\000\000\000\000\000\
\005\000\006\000\006\000\000\000\000\000\005\000\000\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\006\000\006\000\006\000\006\000\
\006\000\006\000\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\006\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\000\013\000\000\000\006\000\
\015\000\015\000\015\000\015\000\015\000\015\000\013\000\000\000\
\000\000\000\000\015\000\013\000\000\000\013\000\000\000\015\000\
\000\000\015\000\000\000\000\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\015\000\016\000\016\000\016\000\016\000\
\016\000\016\000\000\000\000\000\000\000\000\000\016\000\000\000\
\000\000\000\000\000\000\016\000\000\000\016\000\017\000\017\000\
\017\000\017\000\017\000\017\000\000\000\000\000\000\000\016\000\
\017\000\000\000\000\000\000\000\000\000\017\000\000\000\017\000\
\018\000\018\000\018\000\018\000\018\000\018\000\000\000\000\000\
\000\000\017\000\018\000\014\000\014\000\000\000\000\000\018\000\
\000\000\018\000\000\000\000\000\000\000\014\000\000\000\000\000\
\000\000\000\000\014\000\018\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\014\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\061\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\000\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\041\000\000\000\041\000\041\000\000\000\000\000\
\087\000\000\000\000\000\041\000\064\000\041\000\041\000\000\000\
\000\000\041\000\041\000\041\000\000\000\000\000\000\000\000\000\
\105\000\000\000\000\000\000\000\108\000\109\000\111\000\000\000\
\000\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\109\000\047\000\048\000\000\000\000\000\000\000\109\000\000\000\
\000\000\000\000\000\000\000\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\057\000\047\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\106\000\047\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\112\000\047\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\000\000\000\000\060\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\000\000\
\047\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\000\000\000\000\113\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\000\000\047\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\000\000\000\000\115\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\000\000\047\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\000\000\047\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\052\000\053\000\054\000\
\055\000\056\000"

let yycheck = "\001\000\
\000\000\008\001\000\000\003\001\004\001\005\001\006\001\007\001\
\114\000\009\001\010\001\000\000\047\001\008\001\120\000\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\031\001\008\001\026\001\027\001\047\001\030\001\000\000\037\001\
\028\001\029\001\029\001\031\001\032\001\113\000\047\001\115\000\
\030\001\000\000\038\001\119\000\040\001\041\001\029\001\123\000\
\044\001\045\001\046\001\047\001\005\001\030\001\007\001\047\001\
\009\001\010\001\035\001\029\001\000\000\008\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\000\000\
\029\001\026\001\027\001\029\001\035\001\039\001\030\001\028\001\
\029\001\000\000\031\001\032\001\035\001\030\001\030\001\030\001\
\030\001\038\001\000\000\040\001\041\001\030\001\035\001\044\001\
\045\001\046\001\047\001\086\000\093\000\000\000\088\000\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\028\001\029\001\255\255\031\001\032\001\255\255\
\255\255\255\255\255\255\000\000\038\001\255\255\040\001\041\001\
\255\255\255\255\044\001\045\001\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\255\255\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\000\000\040\001\041\001\255\255\
\255\255\044\001\045\001\046\001\047\001\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\037\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\255\255\255\255\
\000\000\255\255\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\255\255\045\001\046\001\047\001\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\026\001\027\001\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\001\001\
\002\001\003\001\004\001\035\001\006\001\037\001\255\255\255\255\
\255\255\030\001\255\255\255\255\000\000\255\255\035\001\047\001\
\037\001\047\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\047\001\255\255\030\001\001\001\002\001\003\001\
\004\001\035\001\006\001\037\001\255\255\255\255\255\255\030\001\
\255\255\255\255\000\000\255\255\035\001\047\001\037\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\047\001\255\255\030\001\001\001\002\001\003\001\004\001\035\001\
\006\001\037\001\255\255\255\255\255\255\030\001\255\255\255\255\
\000\000\255\255\035\001\047\001\037\001\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\047\001\255\255\
\030\001\001\001\002\001\003\001\004\001\035\001\006\001\037\001\
\255\255\255\255\255\255\030\001\255\255\255\255\000\000\255\255\
\035\001\047\001\037\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\047\001\255\255\030\001\001\001\
\002\001\003\001\004\001\035\001\006\001\037\001\255\255\255\255\
\255\255\030\001\255\255\255\255\000\000\255\255\035\001\047\001\
\037\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\047\001\255\255\030\001\001\001\002\001\003\001\
\004\001\035\001\006\001\037\001\255\255\255\255\255\255\030\001\
\255\255\255\255\000\000\255\255\035\001\047\001\037\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\047\001\255\255\030\001\001\001\002\001\003\001\004\001\035\001\
\006\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\047\001\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\255\255\255\255\
\030\001\001\001\002\001\003\001\004\001\035\001\006\001\037\001\
\000\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\047\001\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\030\001\001\001\
\002\001\003\001\004\001\035\001\006\001\037\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\000\000\255\255\030\001\001\001\002\001\003\001\
\004\001\035\001\006\001\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\047\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\000\000\
\255\255\255\255\030\001\001\001\002\001\003\001\004\001\035\001\
\006\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\255\255\255\255\
\030\001\001\001\002\001\003\001\004\001\035\001\006\001\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\030\001\001\001\
\002\001\003\001\004\001\035\001\006\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\255\255\255\255\030\001\001\001\002\001\003\001\
\004\001\035\001\006\001\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\255\255\255\255\030\001\001\001\002\001\255\255\255\255\035\001\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\255\255\255\255\
\030\001\001\001\002\001\255\255\255\255\035\001\255\255\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\255\255\035\001\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\255\255\047\001\
\020\001\021\001\022\001\023\001\024\001\025\001\030\001\255\255\
\255\255\255\255\030\001\035\001\255\255\037\001\255\255\035\001\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\255\255\255\255\047\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\255\255\035\001\255\255\037\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\255\255\047\001\
\030\001\255\255\255\255\255\255\255\255\035\001\255\255\037\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\255\255\047\001\030\001\020\001\021\001\255\255\255\255\035\001\
\255\255\037\001\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\255\255\035\001\047\001\037\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\007\000\047\001\009\000\
\010\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\255\255\031\001\032\001\255\255\255\255\
\082\000\255\255\255\255\038\001\086\000\040\001\041\001\255\255\
\255\255\044\001\045\001\046\001\255\255\255\255\255\255\255\255\
\098\000\255\255\255\255\255\255\102\000\103\000\104\000\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\114\000\009\001\010\001\255\255\255\255\255\255\120\000\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\035\001\009\001\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\035\001\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\035\001\009\001\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\030\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\030\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\030\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\255\255\009\001\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  POWER\000\
  INTDIVIDE\000\
  MOD\000\
  ASSIGN\000\
  DERIV\000\
  INTEG\000\
  SQRT\000\
  SIN\000\
  COS\000\
  TAN\000\
  ASIN\000\
  ACOS\000\
  ATAN\000\
  LOG\000\
  LN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LVEC\000\
  RVEC\000\
  SEMI\000\
  OUTPUT\000\
  COMMA\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  TO\000\
  DOWNTO\000\
  RETURN\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  REAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
 ( [] )
# 566 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 37 "parser.mly"
               ( _1 )
# 573 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 39 "parser.mly"
      ( [_1] )
# 580 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 40 "parser.mly"
                         ( _1 :: _3 )
# 588 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 43 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 596 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 44 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 604 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 612 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 46 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 620 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 47 "parser.mly"
                     ( Binop(_1, Pow,   _3) )
# 628 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "parser.mly"
                        ( Binop(_1, IntDiv,  _3) )
# 636 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                     ( Binop(_1, Mod,   _3) )
# 644 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 652 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                     ( Binop(_1, Eq, _3) )
# 660 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 668 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 676 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 684 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                     ( Binop(_1, Greater,  _3) )
# 692 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 700 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 708 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 716 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                     ( Binop(_1, Deriv,   _3) )
# 724 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                     ( Binop(_1, Integ,   _3) )
# 732 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                     (PreUnaop(Sqrt,_2))
# 739 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                     (PreUnaop(Sin,_2))
# 746 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                     (PreUnaop(Cos,_2))
# 753 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                     (PreUnaop(Tan,_2))
# 760 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                     (PreUnaop(ASin,_2))
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                     (PreUnaop(ACos,_2))
# 774 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                     (PreUnaop(ATan,_2))
# 781 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                     (PreUnaop(Log,_2))
# 788 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                     (PreUnaop(Ln,_2))
# 795 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                     (PreUnaop(Not,_2))
# 802 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 74 "parser.mly"
                     (Num(_1) )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 75 "parser.mly"
                     (Real(_1))
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 76 "parser.mly"
                     (Id(_1))
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                     (Assign(_1,_3))
# 831 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 79 "parser.mly"
                                 (Call(_1,_3))
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                       (_2)
# 846 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                  ( Noexpr )
# 852 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                  ( _1 )
# 859 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                   ( [] )
# 865 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                   ( _2 :: _1 )
# 873 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
              ( Expr(_1) )
# 880 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                     ( Return(_2) )
# 887 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 93 "parser.mly"
                            ( Block(List.rev _2) )
# 894 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 94 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 902 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 95 "parser.mly"
                                            ( If(_3, _5, _7) )
# 911 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 97 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 921 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 98 "parser.mly"
                                  ( While(_3, _5) )
# 929 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                 ( [], [] )
# 935 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 102 "parser.mly"
                 ( (_2 :: fst _1), snd _1 )
# 943 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 103 "parser.mly"
                 ( fst _1, (_2 :: snd _1) )
# 951 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 107 "parser.mly"
     ( { fname = _1;
	 formals = _3;
	 locals = List.rev _6;
	 body = List.rev _7 } )
# 964 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
     ( { fname = _1; 
	 unknowns = _3;
	 formula = _6 } )
# 975 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                  ( [] )
# 981 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 118 "parser.mly"
                  ( List.rev _1 )
# 988 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 121 "parser.mly"
                         ( [_1] )
# 995 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 122 "parser.mly"
                         ( _3 :: _1 )
# 1003 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
                     ( [] )
# 1009 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 126 "parser.mly"
                     ( _2 :: _1 )
# 1017 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                      ( { name = _1; value = _3; } )
# 1025 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'float_list) in
    Obj.repr(
# 132 "parser.mly"
                         ( List.rev _2 )
# 1032 "parser.ml"
               : 'vecter))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                   ( [] )
# 1038 "parser.ml"
               : 'float_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : float) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 136 "parser.mly"
                    ( _3 :: _1 )
# 1046 "parser.ml"
               : 'float_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
